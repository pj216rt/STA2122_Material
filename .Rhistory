x = "μ (with Confidence Interval)",
y = "Confidence Level"
) +
theme_minimal(base_size = 14)
ggplot(ci_df, aes(y = factor(conf_level), x = xbar)) +
geom_point(color = "blue", size = 3) +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "red") +
geom_vline(xintercept = true_mu, color = "darkgreen", linetype = "dashed", linewidth = 1) +
labs(
title = "Confidence Intervals for μ at Different Confidence Levels",
subtitle = "Green dashed line = true μ",
x = "μ (with Confidence Interval)",
y = "Confidence Level"
) +
theme_minimal(base_size = 14)
true_mu <- 10
true_sd <- 3
n <- 50                 # sample size per dataset
n_samples <- 200        # number of datasets (rows of intervals)
conf_levels <- c(0.90, 0.95, 0.99)
# --- Simulate many datasets and compute CIs for each confidence level ---
sim_df <- tibble(sim = 1:n_samples) %>%
rowwise() %>%
mutate(x = list(rnorm(n, mean = true_mu, sd = true_sd))) %>%
ungroup() %>%
mutate(xbar = sapply(x, mean),
s    = sapply(x, sd)) %>%
select(sim, xbar, s)
cis <- expand_grid(sim_df, conf_level = conf_levels) %>%
mutate(
alpha   = 1 - conf_level,
df      = n - 1,
t_crit  = qt(1 - alpha/2, df = df),
me      = t_crit * s / sqrt(n),
lower   = xbar - me,
upper   = xbar + me,
cover   = (lower <= true_mu) & (true_mu <= upper)
)
# --- Coverage summary (empirical) ---
coverage_summary <- cis %>%
group_by(conf_level) %>%
summarise(coverage = mean(cover), .groups = "drop")
print(coverage_summary)
# --- Plot intervals per simulation, colored by whether they cover μ ---
# We'll stack intervals by simulation index, with one facet per confidence level
ggplot(cis, aes(y = sim)) +
geom_segment(aes(x = lower, xend = upper, yend = sim, color = cover), linewidth = 0.8) +
geom_point(aes(x = xbar), size = 1.3) +
geom_vline(xintercept = true_mu, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_color_manual(values = c(`TRUE` = "steelblue", `FALSE` = "tomato"),
labels = c(`TRUE` = "Covers μ", `FALSE` = "Misses μ"),
name = NULL) +
facet_wrap(~ conf_level, ncol = 3,
labeller = labeller(conf_level = function(z) paste0(100*as.numeric(z), "% CI"))) +
labs(
title = "Many Confidence Intervals for μ Across Simulated Samples",
subtitle = "Blue intervals cover the true μ; red intervals miss it. Dashed green line = true μ.",
x = "μ",
y = "Sample index"
) +
theme_minimal(base_size = 13) +
theme(legend.position = "top")
#plot confidence intervals.  Each row is one simulation.  CIs are blue if they cover mu
#and red if they do not.  the dot is the sample mean, with the dashed line being
#the true mean
ggplot(cis, aes(y = sim)) +
geom_segment(aes(x = lower, xend = upper, yend = sim, color = cover), linewidth = 0.8) +
geom_point(aes(x = xbar), size = 1.3) +
geom_vline(xintercept = true_mu, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_color_manual(values = c(`TRUE` = "steelblue", `FALSE` = "tomato"),
labels = c(`TRUE` = "Covers μ", `FALSE` = "Misses μ"),
name = NULL) +
facet_wrap(~ conf_level, ncol = 3,
labeller = labeller(conf_level = function(z) paste0(100*as.numeric(z), "% CI"))) +
labs(
title = "Many Confidence Intervals for μ Across Simulated Samples",
subtitle = "Blue intervals cover the true mu; red intervals miss it. Dashed green line = true mu.",
x = "mu",
y = "Sample index"
) +
theme_minimal(base_size = 13) +
theme(legend.position = "top")
#set of CIS for each confidence level
conf_levels <- c(0.80, 0.90, 0.95, 0.99)
#data and sample statistics from some distribution assuming 95% CI
true_mu <- 10
true_sd <- 3
x <- rnorm(50, mean = true_mu, sd = true_sd)
xbar <- mean(x)
s <- sd(x)
n <- length(x)
#set of CIS for each confidence level
conf_levels <- c(0.80, 0.90, 0.95, 0.99)
ci_df <- data.frame(conf_level = conf_levels) %>%
rowwise() %>%
mutate(
alpha = 1 - conf_level,
t_crit = qt(1 - alpha/2, df = n - 1),
margin_error = t_crit * s / sqrt(n),
lower = xbar - margin_error,
upper = xbar + margin_error
) %>%
ungroup()
ggplot(ci_df, aes(y = factor(conf_level), x = xbar)) +
geom_point(color = "blue", size = 3) +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "red") +
geom_vline(xintercept = true_mu, color = "darkgreen", linetype = "dashed", linewidth = 1) +
labs(
title = "Confidence Intervals for mu at Different Confidence Levels",
subtitle = "Green dashed line = true mu",
x = "μ (with Confidence Interval)",
y = "Confidence Level"
) +
theme_minimal(base_size = 14)
n <- 50
n_samples <- 200
#create table with one row per simulated dataset
#for each row, draw n random values from the normal distribution
#for each observation compute the sample mean and standard deviation
#keep only trhe simulation index and the summary statistics
sim_df <- tibble(sim = 1:n_samples) %>%
rowwise() %>%
mutate(x = list(rnorm(n, mean = true_mu, sd = true_sd))) %>%
ungroup() %>%
mutate(xbar = sapply(x, mean),
s    = sapply(x, sd)) %>%
select(sim, xbar, s)
#build confidence intervals for each simulation
#for each simulation, compute alpha, t_critical, margin of error
#lower and upper CI bounds and an indicator variable to see if the interval
#covers the true value
cis <- expand_grid(sim_df, conf_level = conf_levels) %>%
mutate(
alpha   = 1 - conf_level,
df      = n - 1,
t_crit  = qt(1 - alpha/2, df = df),
me      = t_crit * s / sqrt(n),
lower   = xbar - me,
upper   = xbar + me,
cover   = (lower <= true_mu) & (true_mu <= upper)
)
#group by confidence level and compute coverage probability
coverage_summary <- cis %>%
group_by(conf_level) %>%
summarise(coverage = mean(cover), .groups = "drop")
print(coverage_summary)
#plot confidence intervals.  Each row is one simulation.  CIs are blue if they cover mu
#and red if they do not.  the dot is the sample mean, with the dashed line being
#the true mean
ggplot(cis, aes(y = sim)) +
geom_segment(aes(x = lower, xend = upper, yend = sim, color = cover), linewidth = 0.8) +
geom_point(aes(x = xbar), size = 1.3) +
geom_vline(xintercept = true_mu, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_color_manual(values = c(`TRUE` = "steelblue", `FALSE` = "tomato"),
labels = c(`TRUE` = "Covers μ", `FALSE` = "Misses μ"),
name = NULL) +
facet_wrap(~ conf_level, ncol = 3,
labeller = labeller(conf_level = function(z) paste0(100*as.numeric(z), "% CI"))) +
labs(
title = "Many Confidence Intervals for μ Across Simulated Samples",
subtitle = "Blue intervals cover the true mu; red intervals miss it. Dashed green line = true mu.",
x = "mu",
y = "Sample index"
) +
theme_minimal(base_size = 13) +
theme(legend.position = "top")
#set of CIS for each confidence level
conf_levels <- c(0.50, 0.80, 0.90, 0.95, 0.99, 0.999)
ci_df <- data.frame(conf_level = conf_levels) %>%
rowwise() %>%
mutate(
alpha = 1 - conf_level,
t_crit = qt(1 - alpha/2, df = n - 1),
margin_error = t_crit * s / sqrt(n),
lower = xbar - margin_error,
upper = xbar + margin_error
) %>%
ungroup()
ggplot(ci_df, aes(y = factor(conf_level), x = xbar)) +
geom_point(color = "blue", size = 3) +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "red") +
geom_vline(xintercept = true_mu, color = "darkgreen", linetype = "dashed", linewidth = 1) +
labs(
title = "Confidence Intervals for mu at Different Confidence Levels",
subtitle = "Green dashed line = true mu",
x = "μ (with Confidence Interval)",
y = "Confidence Level"
) +
theme_minimal(base_size = 14)
n <- 50
n_samples <- 800
#create table with one row per simulated dataset
#for each row, draw n random values from the normal distribution
#for each observation compute the sample mean and standard deviation
#keep only trhe simulation index and the summary statistics
sim_df <- tibble(sim = 1:n_samples) %>%
rowwise() %>%
mutate(x = list(rnorm(n, mean = true_mu, sd = true_sd))) %>%
ungroup() %>%
mutate(xbar = sapply(x, mean),
s    = sapply(x, sd)) %>%
select(sim, xbar, s)
#build confidence intervals for each simulation
#for each simulation, compute alpha, t_critical, margin of error
#lower and upper CI bounds and an indicator variable to see if the interval
#covers the true value
cis <- expand_grid(sim_df, conf_level = conf_levels) %>%
mutate(
alpha   = 1 - conf_level,
df      = n - 1,
t_crit  = qt(1 - alpha/2, df = df),
me      = t_crit * s / sqrt(n),
lower   = xbar - me,
upper   = xbar + me,
cover   = (lower <= true_mu) & (true_mu <= upper)
)
#group by confidence level and compute coverage probability
coverage_summary <- cis %>%
group_by(conf_level) %>%
summarise(coverage = mean(cover), .groups = "drop")
print(coverage_summary)
#plot confidence intervals.  Each row is one simulation.  CIs are blue if they cover mu
#and red if they do not.  the dot is the sample mean, with the dashed line being
#the true mean
ggplot(cis, aes(y = sim)) +
geom_segment(aes(x = lower, xend = upper, yend = sim, color = cover), linewidth = 0.8) +
geom_point(aes(x = xbar), size = 1.3) +
geom_vline(xintercept = true_mu, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_color_manual(values = c(`TRUE` = "steelblue", `FALSE` = "tomato"),
labels = c(`TRUE` = "Covers μ", `FALSE` = "Misses μ"),
name = NULL) +
facet_wrap(~ conf_level, ncol = 3,
labeller = labeller(conf_level = function(z) paste0(100*as.numeric(z), "% CI"))) +
labs(
title = "Many Confidence Intervals for μ Across Simulated Samples",
subtitle = "Blue intervals cover the true mu; red intervals miss it. Dashed green line = true mu.",
x = "mu",
y = "Sample index"
) +
theme_minimal(base_size = 13) +
theme(legend.position = "top")
#plot confidence intervals.  Each row is one simulation.  CIs are blue if they cover mu
#and red if they do not.  the dot is the sample mean, with the dashed line being
#the true mean
ggplot(cis, aes(y = sim)) +
geom_segment(aes(x = lower, xend = upper, yend = sim, color = cover), linewidth = 0.8) +
geom_point(aes(x = xbar), size = 1.3) +
geom_vline(xintercept = true_mu, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_color_manual(values = c(`TRUE` = "steelblue", `FALSE` = "tomato"),
labels = c(`TRUE` = "Covers μ", `FALSE` = "Misses μ"),
name = NULL) +
facet_wrap(~ conf_level, ncol = 3,
labeller = labeller(conf_level = function(z) paste0(100*as.numeric(z), "% CI"))) +
labs(
title = "Many Confidence Intervals for mu Across Simulated Samples",
subtitle = "Blue intervals cover the true mu; red intervals miss it. Dashed green line = true mu.",
x = "mu",
y = "Sample index"
) +
theme_minimal(base_size = 13) +
theme(legend.position = "top")
#hypothesis testing
library(tidyverse)
n <- 30
true_mu <- 10
true_sd <- 3
mu0 <- 10
alpha <- 0.05
n_sim <- 5000
#run simulation
sim_results <- replicate(n_sim, {
x <- rnorm(n, mean = true_mu, sd = true_sd)
t_res <- t.test(x, mu = mu0)
c(
t_stat = (mean(x) - mu0) / (sd(x) / sqrt(n)),  #manually compute the t statistic
p_val = t_res$p.value,
reject = as.integer(t_res$p.value < alpha)
)
})
sim_df <- as.data.frame(t(sim_results))
#what is the rejection rate here
rejection_rate <- mean(sim_df$reject)
cat("Empirical rejection rate:", round(rejection_rate, 3), "\n")
#plot
ggplot(sim_df, aes(x = t_stat)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
fill = "skyblue", color = "white") +
stat_function(fun = dt, args = list(df = n-1), color = "red", linewidth = 1) +
geom_vline(xintercept = qt(c(alpha/2, 1-alpha/2), df = n-1),
linetype = "dashed", color = "darkgreen") +
labs(
title = "Simulation of One-Sample t-Test",
subtitle = paste0(n_sim, " simulations, n = ", n,
", empirical rejection rate = ", round(rejection_rate, 3)),
x = "t-statistic",
y = "Density"
) +
theme_minimal(base_size = 14)
# --- Parameters ---
n <- 30                 # sample size
true_sd <- 3
mu0 <- 10              # null hypothesis mean
mu_alt <- 11           # true mean under alternative
alpha <- 0.05
n_sim <- 5000
# --- Simulate under H0 (true mean = mu0) ---
sim_H0 <- replicate(n_sim, {
x <- rnorm(n, mean = mu0, sd = true_sd)
t_stat <- (mean(x) - mu0) / (sd(x) / sqrt(n))
p_val  <- 2*pt(-abs(t_stat), df = n-1)
c(t_stat = t_stat, reject = as.integer(p_val < alpha))
})
# --- Simulate under H1 (true mean = mu_alt) ---
sim_H1 <- replicate(n_sim, {
x <- rnorm(n, mean = mu_alt, sd = true_sd)
t_stat <- (mean(x) - mu0) / (sd(x) / sqrt(n))
p_val  <- 2*pt(-abs(t_stat), df = n-1)
c(t_stat = t_stat, reject = as.integer(p_val < alpha))
})
# Combine results
df <- bind_rows(
as.data.frame(t(sim_H0)) %>% mutate(case = "H0 (true mu = mu0)"),
as.data.frame(t(sim_H1)) %>% mutate(case = "H1 (true mu ≠ mu0)")
)
# Empirical error rates
type1 <- mean(df$reject[df$case == "H0 (true mu = mu0)"])
power <- mean(df$reject[df$case == "H1 (true mu ≠ mu0)"])
type2 <- 1 - power
cat("Type I error rate (α):", round(type1, 3), "\n")
cat("Type II error rate (β):", round(type2, 3), "\n")
cat("Power (1-β):", round(power, 3), "\n")
# Plot t-statistics and rejection regions
crit <- qt(c(alpha/2, 1 - alpha/2), df = n-1)
ggplot(df, aes(x = t_stat, fill = case)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
color = "white", alpha = 0.6, position = "identity") +
geom_vline(xintercept = crit, linetype = "dashed", color = "darkgreen", linewidth = 1) +
scale_fill_manual(values = c("H0 (true mu = mu0)" = "skyblue",
"H1 (true mu ≠ mu0)" = "tomato")) +
labs(
title = "Type I and Type II Errors in Hypothesis Testing",
subtitle = paste0("Dashed lines = critical t-values at α = ", alpha),
x = "t-statistic", y = "Density", fill = "Case"
) +
theme_minimal(base_size = 14)
#parameters
n <- 30
true_mu <- 20
true_sd <- 3
mu0 <- 10
alpha <- 0.05
n_sim <- 5000
#run simulation
#generate n_sim random samples from a normal distribution
#run a one sample t test for each sample
#collect the test statistic, p valuem and and indicate whether H0 is rejected or not
#compute the computed rejection rate
sim_results <- replicate(n_sim, {
x <- rnorm(n, mean = true_mu, sd = true_sd)
t_res <- t.test(x, mu = mu0)
c(
t_stat = (mean(x) - mu0) / (sd(x) / sqrt(n)),  #manually compute the t statistic
p_val = t_res$p.value,
reject = as.integer(t_res$p.value < alpha)
)
})
sim_df <- as.data.frame(t(sim_results))
#what is the rejection rate here
rejection_rate <- mean(sim_df$reject)
cat("Empirical rejection rate:", round(rejection_rate, 3), "\n")
#plot the histogram of t statistics
#the theoretical t_n-1 density overlaid in red
#and the vertical line at the critcal t values
ggplot(sim_df, aes(x = t_stat)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
fill = "skyblue", color = "white") +
stat_function(fun = dt, args = list(df = n-1), color = "red", linewidth = 1) +
geom_vline(xintercept = qt(c(alpha/2, 1-alpha/2), df = n-1),
linetype = "dashed", color = "darkgreen") +
labs(
title = "Simulation of One-Sample t-Test",
subtitle = paste0(n_sim, " simulations, n = ", n,
", empirical rejection rate = ", round(rejection_rate, 3)),
x = "t-statistic",
y = "Density"
) +
theme_minimal(base_size = 14)
true_mus <- c(10, 12, 14, 16, 20)
true_sd <- 3
mu0 <- 10
alpha <- 0.05
n_sim <- 5000
#run simulation.  For each value of true mue=
#generate n_sim random samples from a normal distribution
#run a one sample t test for each sample
#collect the test statistic, p valuem and and indicate whether H0 is rejected or not
#compute the computed rejection rate
sim_df <- bind_rows(lapply(true_mus, function(mu) {
sim_results <- replicate(n_sim, {
x <- rnorm(n, mean = mu, sd = true_sd)
t_res <- t.test(x, mu = mu0)
c(
t_stat = (mean(x) - mu0) / (sd(x) / sqrt(n)),
reject = as.integer(t_res$p.value < alpha)
)
})
data.frame(t(sim_results)) %>%
mutate(true_mu = mu)
}))
#run simulation.  For each value of true mue=
#generate n_sim random samples from a normal distribution
#run a one sample t test for each sample
#collect the test statistic, p valuem and and indicate whether H0 is rejected or not
#compute the computed rejection rate
sim_df <- bind_rows(lapply(true_mus, function(mu) {
sim_results <- replicate(n_sim, {
x <- rnorm(n, mean = mu, sd = true_sd)
t_res <- t.test(x, mu = mu0)
c(
t_stat = (mean(x) - mu0) / (sd(x) / sqrt(n)),
reject = as.integer(t_res$p.value < alpha)
)
})
data.frame(t(sim_results)) %>%
mutate(true_mu = mu)
}))
#what is the rejection rate here for the different values of true mu
rejection_rates <- sim_df %>%
group_by(true_mu) %>%
summarise(empirical_rejection_rate = mean(reject), .groups = "drop")
print(rejection_rates)
#plot the histogram of t statistics
#the theoretical t_n-1 density overlaid in red
#and the vertical line at the critcal t values
ggplot(sim_df, aes(x = t_stat)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
fill = "skyblue", color = "white") +
stat_function(fun = dt, args = list(df = n-1), color = "red", linewidth = 1) +
geom_vline(xintercept = qt(c(alpha/2, 1-alpha/2), df = n-1),
linetype = "dashed", color = "darkgreen") +
facet_wrap(~ true_mu, scales = "free_y") +
labs(
title = "One-Sample t-Test: Sampling Distribution of t under Different True Means",
subtitle = paste0(n_sim, " simulations per panel, n = ", n,
", μ₀ = ", mu0, ". Green lines = rejection region."),
x = "t-statistic",
y = "Density"
) +
theme_minimal(base_size = 14)
#plot the histogram of t statistics
#the theoretical t_n-1 density overlaid in red
#and the vertical line at the critcal t values
ggplot(sim_df, aes(x = t_stat)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
fill = "skyblue", color = "white") +
stat_function(fun = dt, args = list(df = n-1), color = "red", linewidth = 1) +
geom_vline(xintercept = qt(c(alpha/2, 1-alpha/2), df = n-1),
linetype = "dashed", color = "darkgreen") +
facet_wrap(~ true_mu, scales = "free_y") +
labs(
title = "One-Sample t-Test: Sampling Distribution of t under Different True Means",
subtitle = paste0(n_sim, " simulations per panel, n = ", n,
", mu true = ", mu0, ". Green lines = rejection region."),
x = "t-statistic",
y = "Density"
) +
theme_minimal(base_size = 14)
true_mus <- c(7, 10, 12, 16)
true_sd <- 3
mu0 <- 10
alpha <- 0.05
n_sim <- 5000
#run simulation.  For each value of true mue=
#generate n_sim random samples from a normal distribution
#run a one sample t test for each sample
#collect the test statistic, p valuem and and indicate whether H0 is rejected or not
#compute the computed rejection rate
sim_df <- bind_rows(lapply(true_mus, function(mu) {
sim_results <- replicate(n_sim, {
x <- rnorm(n, mean = mu, sd = true_sd)
t_res <- t.test(x, mu = mu0)
c(
t_stat = (mean(x) - mu0) / (sd(x) / sqrt(n)),
reject = as.integer(t_res$p.value < alpha)
)
})
data.frame(t(sim_results)) %>%
mutate(true_mu = mu)
}))
#what is the rejection rate here for the different values of true mu
rejection_rates <- sim_df %>%
group_by(true_mu) %>%
summarise(empirical_rejection_rate = mean(reject), .groups = "drop")
print(rejection_rates)
#plot the histogram of t statistics
#the theoretical t_n-1 density overlaid in red
#and the vertical line at the critcal t values
ggplot(sim_df, aes(x = t_stat)) +
geom_histogram(aes(y = after_stat(density)), bins = 40,
fill = "skyblue", color = "white") +
stat_function(fun = dt, args = list(df = n-1), color = "red", linewidth = 1) +
geom_vline(xintercept = qt(c(alpha/2, 1-alpha/2), df = n-1),
linetype = "dashed", color = "darkgreen") +
facet_wrap(~ true_mu, scales = "free_y") +
labs(
title = "One-Sample t-Test: Sampling Distribution of t under Different True Means",
subtitle = paste0(n_sim, " simulations per panel, n = ", n,
", mu true = ", mu0, ". Green lines = rejection region."),
x = "t-statistic",
y = "Density"
) +
theme_minimal(base_size = 14)
